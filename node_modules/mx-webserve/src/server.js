"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebRouteUnit = void 0;
const express_1 = __importDefault(require("express"));
const body_parser_1 = __importDefault(require("body-parser"));
const fs_1 = require("fs");
const path_1 = require("path");
const zlib_1 = require("zlib");
const compression_1 = __importDefault(require("compression"));
const debug_1 = require("debug");
let Debug = debug_1.debug("mx-webserve");
let gRoutePath = process.mainModule ? path_1.parse(process.mainModule.filename).dir : process.cwd();
class WebRouteUnit {
    constructor() {
        this.app = express_1.default();
    }
    use(...handlers) {
        if (this.app)
            this.app.use(...handlers);
    }
    static(pre, root) {
        return this.app.use(pre, express_1.default.static(root, {}));
    }
    /**
     * 开启配置
     * @param setting
     */
    enable(setting) {
        this.app.enable(setting);
    }
    /**
     * 关闭配置
     * @param setting
     */
    disable(setting) {
        this.app.disable(setting);
    }
    _crossUse(req, res, next) {
        if (this.app.enabled("cross")) {
            res.header("Access-Control-Allow-Origin", "*");
            res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
            res.header("Access-Control-Allow-Methods", "GET,POST,OPTIONS");
        }
        next();
    }
    _options(req, res, next) {
        res.end();
    }
    _404(req, res, next) {
        if (!res.headersSent) {
            // 表示有人处理过了
            res.writeHead(404);
            res.write(JSON.stringify({
                code: -1,
                errMsg: "can not find [" + req.path + "]"
            }));
        }
        res.end();
    }
    init(port, uses, limit) {
        if (this.app.enabled("init"))
            return Promise.resolve();
        this.app.use(this._crossUse.bind(this));
        this.app.options("*", this._options.bind(this));
        if (typeof limit == 'string') {
            limit = {
                text: limit,
                json: limit,
                urlencoded: limit,
                raw: limit,
            };
        }
        else if (limit == undefined) {
            limit = {};
        }
        this.app.use(body_parser_1.default.text({ limit: limit.text || '100kb' }));
        this.app.use(body_parser_1.default.raw({ limit: limit.raw || '100kb' }));
        this.app.use(body_parser_1.default.urlencoded({ extended: true, limit: limit.urlencoded || "10mb" }));
        this.app.use(body_parser_1.default.json({ limit: limit.json || '100kb' }));
        if (limit.gzip == true)
            this.app.use(compression_1.default());
        // 注册一下别人提交的内容
        this.app.use(this.favicon.bind(this));
        for (let i = 0; i < uses.length; i++) {
            this.app.use(uses[i]);
        }
        this.app.use(this._404.bind(this));
        this.load_favicon();
        this.app.enable("init");
        let server = this.app.listen(port);
        return new Promise((resolve, reject) => {
            // 建立一个web监控
            server.on("error", function (e) {
                Debug(e);
                reject(e);
            });
            server.on("listening", () => {
                Debug("listen on:" + port);
                resolve();
            });
        });
    }
    load_favicon() {
        try {
            this.favicon_data = zlib_1.gzipSync(fs_1.readFileSync(path_1.join(gRoutePath, "favicon.ico")));
        }
        catch (e) { }
    }
    favicon(req, res, next) {
        if (req.url == "/favicon.ico") {
            if (!this.favicon_data) {
                res.status(404);
            }
            else {
                res.writeHead(200, { "Content-Type": "image/x-icon", "Content-Encoding": "gzip" });
                res.write(this.favicon_data);
            }
            res.end();
        }
        else {
            next();
        }
    }
}
exports.WebRouteUnit = WebRouteUnit;
//# sourceMappingURL=data:application/json;base64,