"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPCCenter = void 0;
const socket_io_1 = require("../net/socket.io");
const proto_1 = require("../proto");
const hashring_1 = __importDefault(require("hashring"));
// export class DispatchModule {
//     static dispatchMap: { [name: string]: (pool: string[], reqid: string) => string } = {};
//     static dispatchMethod: string = "";
//     static registDispatchMethod(name: string, fn: (pool: string[], reqid: string) => string) {
//         this.dispatchMap[name] = fn;
//     }
//     static switchMethod(name: string) {
//         this.dispatchMethod = name;
//     }
//     static getDispatch(name?: string) {
//         if (!name) name = this.dispatchMethod;
//         if (!name) return null;
//         if (!this.dispatchMap.hasOwnProperty(name)) return null;
//         return this.dispatchMap[name];
//     }
// }
class HashringModule {
    constructor(...ids) {
        if (ids.length > 0) {
            this.roles = [...ids];
            this.inst = new hashring_1.default(ids);
        }
        else {
            this.roles = [];
            this.inst = new hashring_1.default([]);
        }
    }
    empty() {
        return this.roles.length == 0;
    }
    add(id, weight) {
        if (weight) {
            this.inst.add({ id: { weight: weight } });
        }
        else {
            this.inst.add(id);
        }
        this.roles.push(id);
    }
    remove(id) {
        this.inst.remove(id);
        let idx = this.roles.indexOf(id);
        if (idx >= 0) {
            this.roles.splice(idx, 1);
        }
    }
    dispatch(key) {
        if (this.roles.length == 1)
            return this.roles[0];
        let mq = key.split('.')[0];
        if (!mq) {
            // 如果没有指定位置那么就随机
            // let idx = Math.floor(Math.random() * this.roles.length)
            // return this.roles[idx]
            // 随机就直接走一致性hash好了
            return this.inst.get(key);
        }
        else {
            return this.inst.get(mq);
        }
    }
    foreach(callbackfn) {
        this.roles.forEach(callbackfn);
    }
}
// 负责转发RPC相关的消息
class RPCCenter {
    constructor(srv) {
        // inside: InsideClient = gInsideClient;
        this.centerSign = proto_1.gSystemSign;
        this.req2sockets = new Map;
        this.role2sockets = new Map;
        this.sockets2role = new Map;
        if (typeof srv == "number") {
            this.net = new socket_io_1.RPCNetServer(srv);
        }
        else if (srv instanceof socket_io_1.RPCNetServer) {
            this.net = srv;
        }
        else {
            this.net = new socket_io_1.RPCNetServer();
        }
        this.net.on("close", this.onExist.bind(this));
        this.net.on("REGIST", this.onRegist.bind(this));
        this.net.on("RPC", this.onRPC.bind(this));
        this.net.on("RPCRET", this.onRPCRET.bind(this));
        this.net.on("RPCBC", this.onRPCBC.bind(this));
        // this.inside.on("RPC", this.onRPC.bind(this))
        // this.inside.on("RPCRET", this.onRPCRET.bind(this))
        // this.inside.on("RPCBC", this.onRPCBC.bind(this))
    }
    send(socketid, ...args) {
        let role = this.sockets2role.get(socketid);
        // if (role && role.sign == this.centerSign) {
        //     return this.inside.send(...args);
        // }
        return this.net.send(socketid, ...args);
    }
    onRegist(socketid, role, isRequest, clientSign) {
        if (!isRequest) {
            let sockPool = this.role2sockets.get(role);
            if (!sockPool) {
                this.role2sockets.set(role, new HashringModule(socketid));
            }
            else {
                sockPool.add(socketid);
            }
        }
        // 回复一个事件
        this.send(socketid, "REGISTRET", this.centerSign);
        let rolesPool = this.sockets2role.get(socketid);
        if (!rolesPool) {
            rolesPool = { roles: {}, sign: clientSign };
            this.sockets2role.set(socketid, rolesPool);
        }
        if (!rolesPool.roles[role]) {
            rolesPool.roles[role] = {
                requestCount: 0,
                handleCount: 0
            };
        }
        if (isRequest)
            rolesPool.roles[role].requestCount++;
        else
            rolesPool.roles[role].handleCount++;
    }
    onExist(socketid) {
        let role = this.sockets2role.get(socketid);
        if (!role) {
            // 正常不存在这个情况
            return;
        }
        this.sockets2role.delete(socketid);
        for (let roleName in role.roles) {
            let rolePool = this.role2sockets.get(roleName);
            if (!rolePool) {
                // 正常不存在这个情况
                continue;
            }
            rolePool.remove(socketid);
        }
    }
    onRPC(socketid, reqid, route, ...args) {
        // 这里route错了需要调整
        if (route == undefined || route == null || typeof route != "string") {
            console.error(...arguments);
            return;
        }
        let rouets = route.split('.');
        // 这里根据routehead 找到需要的角色
        let rolePool = this.role2sockets.get(rouets[0]);
        if (!rolePool || rolePool.empty()) {
            // 表示不存在，那么直接回复404
            this.send(socketid, "RPCRET", reqid, route, 404);
            return;
        }
        // 收到rpc请求，这里把requestid和socketid绑定一下
        this.req2sockets.set(reqid, socketid);
        // let dispatch = DispatchModule.getDispatch() || this.dispatch;
        let chooseId = "";
        if (this.dispatch) {
            chooseId = this.dispatch(rolePool.roles, reqid);
        }
        else {
            chooseId = rolePool.dispatch(reqid);
        }
        this.send(chooseId, "RPC", reqid, route, ...args);
    }
    onRPCRET(socketid, reqid, ...args) {
        // 收到rpc请求，这里把requestid和socketid绑定一下
        let sid = this.req2sockets.get(reqid);
        if (!sid) {
            // 不存在这种情况，除非连接断开了，或者进程中断过 后续考虑是否使用消息队列或者其它高级方式
            return;
        }
        this.req2sockets.delete(reqid);
        this.send(sid, "RPCRET", reqid, ...args);
    }
    onRPCBC(socketid, reqid, toSelf, route, ...args) {
        // 这里route错了需要调整
        if (route == undefined || route == null || typeof route != "string") {
            console.error(...arguments);
            return;
        }
        let rouets = route.split('.');
        // 这里根据routehead 找到需要的角色
        let rolePool = this.role2sockets.get(rouets[0]);
        if (!rolePool || rolePool.empty())
            return;
        // 收到rpc请求，这里把requestid和socketid绑定一下
        rolePool.foreach((sid) => {
            if (!toSelf && sid == socketid)
                return;
            this.send(sid, "RPCBC", reqid, route, ...args);
        });
        // for (let i = 0; i < rolePools.length; i++) {
        //     let sid = rolePools[i];
        //     if (!toSelf && sid == socketid) {
        //         continue;
        //     }
        //     this.send(sid, "RPCBC", reqid, route, ...args)
        // }
    }
}
exports.RPCCenter = RPCCenter;
// export async function test() {
//     let s = new RPCCenter()
//     let rh = new RPCHandle("name")
//     let rc = new RPCRequest("name")
//     rh.Listen("getname", function () {
//         return "chenkai"
//     })
//     let result = await rc.Call("getname", "chenkai")
//     console.log(result)
// }
//# sourceMappingURL=data:application/json;base64,